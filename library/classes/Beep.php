<?php

defined('_SECURED') or die('Restricted access');
class Beep {
    public $db;
    public $beepdb;
    public $config;
    public $menu;
    //public $memcache;
    public $translator;
    public $defaulttranslator;
    public $lang;
    public $textRTL;
    public $deviceType;

    function beep() {
        //If the file is called from the index.php of the global site
        if (file_exists('beepconfig.php')) {
            include_once('beepconfig.php');
        } else {
            //If it is called from a subdirectory. For different solution change it...
            include_once('../beepconfig.php');
        }

        $this->config = new beepconfig();
        //$this->memcache = new memcache;
        $this->security = 1;
        if (isset($_GET["lang"])) {
            $this->lang = $_GET["lang"];
        } else {
            $this->lang = "en";
        }
       // $_SESSION["language_code"]=$this->lang;
    }

    ////////////////////////DATABASE FUNCTIONS///////////////////
    //connect to the database
    function connect_to_database() {
        //If the file is called from the index.php of the global site
        if (file_exists('library/databasegeneral.php')) {
             include_once('library/databasegeneral.php');
        } else {
            //If it is called from a subdirectory. For different solution change it...
            include_once('../library/databasegeneral.php');
        }
       
        $this->db = new mysqlDatabase();
        $this->db->open_connection();
        return $this->db;
    }
    
    //check if database connected
    function database_connected() {
        if (isset($this->db)) {
            return true;
        } else {
            return false;
        }
    }

    //close database
    function database_close() {
        $this->db->close_connection();
    }

    ///////////////////END OF DATABASE FUNCTIONS///////////////////
    /////////////////// SPHINX FUNCTIONS //////////////////////////
    function connect_to_sphinx() {
        $this->sphinx = mysqli_connect("sphinxdb", "", "", "uc1i_index", 9306) or die("Error " . mysqli_error($this->sphinx));
        return $this->sphinx;
    }

    //check if database connected
    function sphinx_connected() {
        if (isset($this->sphinx)) {
            return true;
        } else {
            return false;
        }
    }

    //close database
    function sphinx_close() {
        mysqli_close($this->sphinx);
    }

    ////////////////// END SPHINX FUNCTIONS ///////////////////////
    //////////////////MEMCACHE////////////////////////////////////
    function memcache_connect() {
        $this->memcache->connect('localhost', 11211) or die("Could not connect");
    }

    function memcache_get($key) {
        $get_result = $this->memcache->get($key);
        return $get_result;
    }

    function memcache_set($key, $data, $timeout) {
        $this->memcache->set($key, $data, false, $timeout) or die("Failed to save data at the server");
    }

    function memcache_close() {
        $this->memcache->close();
    }

    function memcache_delete($key) {
        $this->memcache->delete($key);
    }

    /////////////// END OF MEMCACHE /////////////////////////////
    //////////////////GET DATA////////////////////////////////////
    function getdata($query) {
        $result = $this->db->query($query);
        return $this->db->fetch_assoc($result);
    }
    
    function getdataajax($url, $elementid) {
        ?>
        <script> get('<?php echo $url; ?>', '<?php echo $elementid; ?>')

            function get(url, elementid) {
                var xmlhttp;
                if (window.XMLHttpRequest) {
                    xmlhttp = new XMLHttpRequest(); // code for IE7+, Firefox, Chrome, Opera, Safari
                } else {
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP"); // code for IE6, IE5
                }
                xmlhttp.onreadystatechange = function () {
                    if (xmlhttp.readyState == 1) {
                        document.getElementById(elementid).innerHTML = "<img src='images/loader.gif'/>";
                        document.getElementById(elementid).className = "loading";
                    }
                    if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {
                        document.getElementById(elementid).innerHTML = xmlhttp.responseText;
                        document.getElementById(elementid).className = "";
                    }
                }
                xmlhttp.open("GET", url, true);
                xmlhttp.send();
            }
        </script>
        <?php
    }

    /////////////// END OF GET DATA /////////////////////////////
    //////////////////// APPEND SCRIPTS //////////////////////
    function appendscript($appendscript, $script = NULL) {
        //echo 'test'.$appendscript;
        //If no script, set as null
        if ($script == NULL) {
            $appendscript = '';
        } else {
            $appendscript .= $script;
        }
        return $appendscript;
    }

    function appendscriptfile($appendfile, $file = NULL) {
        //echo 'test'.$appendscript;
        //If no script, set as null
        if ($file == NULL) {
            $appendfile = '';
        } else {
            $appendfile .= '<script type="text/javascript" src="' . $file . '"></script>';
        }
        return $appendfile;
    }

    ///////////////// END OF APPEND SCRIPTS ///////////////////
    ///////////SEND EMAIL TO USER//////////////////////////////
    function sendmail($from=NULL, $user_email, $subject, $content) {
        if (!class_exists("SendGrid")) {
             if (file_exists('library/sendgrid-php/sendgrid-php.php')) {
                include_once('library/sendgrid-php/sendgrid-php.php');
            } else {
                //If it is called from a subdirectory. For different solution change it...
                include_once('../library/sendgrid-php/sendgrid-php.php');
            }
        }
        $username = $this->config->sendgrid_username;
        $password = $this->config->sendgrid_password;
        $sendgrid = new SendGrid($username, $password, array("turn_off_ssl_verification" => true));
        if($from==NULL){
            $from = "donotreply@beepxtra.com";
        }  
        $receiver_email = array($user_email);
        $email = new SendGrid\Email();
        $email->setTos($receiver_email);
        $email->setFrom($from);
        $email->setFromName('Donotreply');
        //$email->setReplyTo($from);
        $email->setSubject($subject);
        $email->setHtml($content);
        $sendgrid->send($email);
    }

    //function sendmailattachment($from = NULL, $to, $subject, $content, $files) {
    function sendmailattachment($from = NULL, $from_name, $to, $subject, $content, $files) {
        if (!class_exists("SendGrid")) {
             if (file_exists('library/sendgrid-php/sendgrid-php.php')) {
                include_once('library/sendgrid-php/sendgrid-php.php');
            } else {
                //If it is called from a subdirectory. For different solution change it...
                include_once('../library/sendgrid-php/sendgrid-php.php'); 
            }
        }
        $username = $this->config->sendgrid_username;
        $password = $this->config->sendgrid_password;
        $sendgrid = new SendGrid($username, $password, array("turn_off_ssl_verification" => true));
        if($from==NULL){
            $from = "donotreply@email.com";
        }  
        $receiver_email = array($to);
        $email = new SendGrid\Email();
        $email->setTos($receiver_email);
        $email->setFrom($from);
        $email->setFromName($from_name);
        //$email->setReplyTo($from);
        $email->setSubject($subject);
        $email->setHtml($content);
        if(!empty($files)){
            foreach ($files as $file) {
                $email->addAttachment($file["name"]); 
            }
        }
        $result=$sendgrid->send($email); 
        sleep(1);
        if(!empty($files)){
            foreach ($files as $file) {
                unlink($file["name"]);
            } 
        } 
    }

    function createSEFurl($menu) {
        switch ($menu->type) {
            case 'page':
                $link = "/" . $this->lang . "/" . $menu->path;
                break;
            case 'external':
                $link = $menu->link;
                break;
            case 'media':
                $link = '#';
                break;
            case 'news':
                $link = '#';
                break;
            case 'controller':
                $link = "/" . $this->lang . "/" . $menu->path;
                break;
            default:
                $link = '#';
        }
        return $link;
    }

    function translator($lang) {
        include_once('library/translation.php');
        $this->translator = new Translator($lang);
        $this->defaulttranslator = new Translator("en");
    }

    function changelanguage($lang) {
        $this->lang = $lang;
    }

    function getTextDirection($lang) {
        $data = $this->getData("SELECT rtl FROM languages where code='$lang'");
        $this->textRTL = $data[0]["rtl"];
        if ($this->textRTL) {
            return "rtl";
        } else {
            return "ltr";
        }
    }
    
    //URL SLUG
    function friendly_url_creator($str, $options = array()) {
	// Make sure string is in UTF-8 and strip invalid UTF-8 characters
	$str = mb_convert_encoding((string)$str, 'UTF-8', mb_list_encodings());
	
	$defaults = array(
		'delimiter' => '-',
		'limit' => null,
		'lowercase' => true,
		'replacements' => array('/&/i' => ' and '),
		'transliterate' => false,
	);
	
	// Merge options
	$options = array_merge($defaults, $options);
	
	$char_map = array(
		// Latin
		'Ã€' => 'A', 'Ã?' => 'A', 'Ã‚' => 'A', 'Ãƒ' => 'A', 'Ã„' => 'A', 'Ã…' => 'A', 'Ã†' => 'AE', 'Ã‡' => 'C', 
		'Ãˆ' => 'E', 'Ã‰' => 'E', 'ÃŠ' => 'E', 'Ã‹' => 'E', 'ÃŒ' => 'I', 'Ã?' => 'I', 'ÃŽ' => 'I', 'Ã?' => 'I', 
		'Ã?' => 'D', 'Ã‘' => 'N', 'Ã’' => 'O', 'Ã“' => 'O', 'Ã”' => 'O', 'Ã•' => 'O', 'Ã–' => 'O', 'Å?' => 'O', 
		'Ã˜' => 'O', 'Ã™' => 'U', 'Ãš' => 'U', 'Ã›' => 'U', 'Ãœ' => 'U', 'Å°' => 'U', 'Ã?' => 'Y', 'Ãž' => 'TH', 
		'ÃŸ' => 'ss', 
		'Ã ' => 'a', 'Ã¡' => 'a', 'Ã¢' => 'a', 'Ã£' => 'a', 'Ã¤' => 'a', 'Ã¥' => 'a', 'Ã¦' => 'ae', 'Ã§' => 'c', 
		'Ã¨' => 'e', 'Ã©' => 'e', 'Ãª' => 'e', 'Ã«' => 'e', 'Ã¬' => 'i', 'Ã­' => 'i', 'Ã®' => 'i', 'Ã¯' => 'i', 
		'Ã°' => 'd', 'Ã±' => 'n', 'Ã²' => 'o', 'Ã³' => 'o', 'Ã´' => 'o', 'Ãµ' => 'o', 'Ã¶' => 'o', 'Å‘' => 'o', 
		'Ã¸' => 'o', 'Ã¹' => 'u', 'Ãº' => 'u', 'Ã»' => 'u', 'Ã¼' => 'u', 'Å±' => 'u', 'Ã½' => 'y', 'Ã¾' => 'th', 
		'Ã¿' => 'y',

		// Latin symbols
		'Â©' => '(c)',

		// Greek
		'Î‘' => 'A', 'Î’' => 'B', 'Î“' => 'G', 'Î”' => 'D', 'Î•' => 'E', 'Î–' => 'Z', 'Î—' => 'H', 'Î˜' => '8',
		'Î™' => 'I', 'Îš' => 'K', 'Î›' => 'L', 'Îœ' => 'M', 'Î?' => 'N', 'Îž' => '3', 'ÎŸ' => 'O', 'Î ' => 'P',
		'Î¡' => 'R', 'Î£' => 'S', 'Î¤' => 'T', 'Î¥' => 'Y', 'Î¦' => 'F', 'Î§' => 'X', 'Î¨' => 'PS', 'Î©' => 'W',
		'Î†' => 'A', 'Îˆ' => 'E', 'ÎŠ' => 'I', 'ÎŒ' => 'O', 'ÎŽ' => 'Y', 'Î‰' => 'H', 'Î?' => 'W', 'Îª' => 'I',
		'Î«' => 'Y',
		'Î±' => 'a', 'Î²' => 'b', 'Î³' => 'g', 'Î´' => 'd', 'Îµ' => 'e', 'Î¶' => 'z', 'Î·' => 'h', 'Î¸' => '8',
		'Î¹' => 'i', 'Îº' => 'k', 'Î»' => 'l', 'Î¼' => 'm', 'Î½' => 'n', 'Î¾' => '3', 'Î¿' => 'o', 'Ï€' => 'p',
		'Ï?' => 'r', 'Ïƒ' => 's', 'Ï„' => 't', 'Ï…' => 'y', 'Ï†' => 'f', 'Ï‡' => 'x', 'Ïˆ' => 'ps', 'Ï‰' => 'w',
		'Î¬' => 'a', 'Î­' => 'e', 'Î¯' => 'i', 'ÏŒ' => 'o', 'Ï?' => 'y', 'Î®' => 'h', 'ÏŽ' => 'w', 'Ï‚' => 's',
		'ÏŠ' => 'i', 'Î°' => 'y', 'Ï‹' => 'y', 'Î?' => 'i',

		// Turkish
		'Åž' => 'S', 'Ä°' => 'I', 'Ã‡' => 'C', 'Ãœ' => 'U', 'Ã–' => 'O', 'Äž' => 'G',
		'ÅŸ' => 's', 'Ä±' => 'i', 'Ã§' => 'c', 'Ã¼' => 'u', 'Ã¶' => 'o', 'ÄŸ' => 'g', 

		// Russian
		'Ð?' => 'A', 'Ð‘' => 'B', 'Ð’' => 'V', 'Ð“' => 'G', 'Ð”' => 'D', 'Ð•' => 'E', 'Ð?' => 'Yo', 'Ð–' => 'Zh',
		'Ð—' => 'Z', 'Ð˜' => 'I', 'Ð™' => 'J', 'Ðš' => 'K', 'Ð›' => 'L', 'Ðœ' => 'M', 'Ð?' => 'N', 'Ðž' => 'O',
		'ÐŸ' => 'P', 'Ð ' => 'R', 'Ð¡' => 'S', 'Ð¢' => 'T', 'Ð£' => 'U', 'Ð¤' => 'F', 'Ð¥' => 'H', 'Ð¦' => 'C',
		'Ð§' => 'Ch', 'Ð¨' => 'Sh', 'Ð©' => 'Sh', 'Ðª' => '', 'Ð«' => 'Y', 'Ð¬' => '', 'Ð­' => 'E', 'Ð®' => 'Yu',
		'Ð¯' => 'Ya',
		'Ð°' => 'a', 'Ð±' => 'b', 'Ð²' => 'v', 'Ð³' => 'g', 'Ð´' => 'd', 'Ðµ' => 'e', 'Ñ‘' => 'yo', 'Ð¶' => 'zh',
		'Ð·' => 'z', 'Ð¸' => 'i', 'Ð¹' => 'j', 'Ðº' => 'k', 'Ð»' => 'l', 'Ð¼' => 'm', 'Ð½' => 'n', 'Ð¾' => 'o',
		'Ð¿' => 'p', 'Ñ€' => 'r', 'Ñ?' => 's', 'Ñ‚' => 't', 'Ñƒ' => 'u', 'Ñ„' => 'f', 'Ñ…' => 'h', 'Ñ†' => 'c',
		'Ñ‡' => 'ch', 'Ñˆ' => 'sh', 'Ñ‰' => 'sh', 'ÑŠ' => '', 'Ñ‹' => 'y', 'ÑŒ' => '', 'Ñ?' => 'e', 'ÑŽ' => 'yu',
		'Ñ?' => 'ya',

		// Ukrainian
		'Ð„' => 'Ye', 'Ð†' => 'I', 'Ð‡' => 'Yi', 'Ò?' => 'G',
		'Ñ”' => 'ye', 'Ñ–' => 'i', 'Ñ—' => 'yi', 'Ò‘' => 'g',

		// Czech
		'ÄŒ' => 'C', 'ÄŽ' => 'D', 'Äš' => 'E', 'Å‡' => 'N', 'Å˜' => 'R', 'Å ' => 'S', 'Å¤' => 'T', 'Å®' => 'U', 
		'Å½' => 'Z', 
		'Ä?' => 'c', 'Ä?' => 'd', 'Ä›' => 'e', 'Åˆ' => 'n', 'Å™' => 'r', 'Å¡' => 's', 'Å¥' => 't', 'Å¯' => 'u',
		'Å¾' => 'z', 

		// Polish
		'Ä„' => 'A', 'Ä†' => 'C', 'Ä˜' => 'e', 'Å?' => 'L', 'Åƒ' => 'N', 'Ã“' => 'o', 'Åš' => 'S', 'Å¹' => 'Z', 
		'Å»' => 'Z', 
		'Ä…' => 'a', 'Ä‡' => 'c', 'Ä™' => 'e', 'Å‚' => 'l', 'Å„' => 'n', 'Ã³' => 'o', 'Å›' => 's', 'Åº' => 'z',
		'Å¼' => 'z',

		// Latvian
		'Ä€' => 'A', 'ÄŒ' => 'C', 'Ä’' => 'E', 'Ä¢' => 'G', 'Äª' => 'i', 'Ä¶' => 'k', 'Ä»' => 'L', 'Å…' => 'N', 
		'Å ' => 'S', 'Åª' => 'u', 'Å½' => 'Z',
		'Ä?' => 'a', 'Ä?' => 'c', 'Ä“' => 'e', 'Ä£' => 'g', 'Ä«' => 'i', 'Ä·' => 'k', 'Ä¼' => 'l', 'Å†' => 'n',
		'Å¡' => 's', 'Å«' => 'u', 'Å¾' => 'z'
	);
	
	// Make custom replacements
	$str = preg_replace(array_keys($options['replacements']), $options['replacements'], $str);
	
	// Transliterate characters to ASCII
	if ($options['transliterate']) {
		$str = str_replace(array_keys($char_map), $char_map, $str);
	}
	
	// Replace non-alphanumeric characters with our delimiter
	$str = preg_replace('/[^\p{L}\p{Nd}]+/u', $options['delimiter'], $str);
	
	// Remove duplicate delimiters
	$str = preg_replace('/(' . preg_quote($options['delimiter'], '/') . '){2,}/', '$1', $str);
	
	// Truncate slug to max. characters
	$str = mb_substr($str, 0, ($options['limit'] ? $options['limit'] : mb_strlen($str, 'UTF-8')), 'UTF-8');
	
	// Remove delimiter from ends
	$str = trim($str, $options['delimiter']);
	
	return $options['lowercase'] ? mb_strtolower($str, 'UTF-8') : $str;
}
}
?>